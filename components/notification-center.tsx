"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Bell, BellRing, Calendar, Clock, Settings, Star, Sparkles } from "lucide-react"

interface NotificationCenterProps {
  upcomingDoses: any[]
}

export default function NotificationCenter({ upcomingDoses }: NotificationCenterProps) {
  const [showNotifications, setShowNotifications] = useState(false)
  const [notificationsEnabled, setNotificationsEnabled] = useState(false)
  const [permission, setPermission] = useState<NotificationPermission>("default")
  const [activeNotifications, setActiveNotifications] = useState<Set<string>>(new Set())
  const [showPreview, setShowPreview] = useState(false)

  useEffect(() => {
    if ("Notification" in window) {
      setPermission(Notification.permission)
      setNotificationsEnabled(Notification.permission === "granted")
    }
  }, [])

  useEffect(() => {
    if ("Notification" in window && Notification.permission === "default") {
      Notification.requestPermission().then((permission) => {
        setPermission(permission)
        setNotificationsEnabled(permission === "granted")
      })
    }
  }, [])

  useEffect(() => {
    if (!notificationsEnabled) return

    const scheduleNotifications = () => {
      upcomingDoses.forEach((dose) => {
        const doseTime = new Date(dose.scheduledTime).getTime()
        const now = new Date().getTime()
        const timeUntilDose = doseTime - now

        if (timeUntilDose > 0 && timeUntilDose <= 24 * 60 * 60 * 1000) {
          const doseTimeout = setTimeout(() => {
            if (!activeNotifications.has(`dose-${dose.medicationId}`)) {
              new Notification(`💊 Time for ${dose.medicationName}!`, {
                body: `Take ${dose.dosage} now. Earn points for on-time logging!`,
                icon: "/placeholder.svg?height=64&width=64",
                tag: `dose-${dose.medicationId}`,
                requireInteraction: true,
              })
              setActiveNotifications((prev) => new Set(prev).add(`dose-${dose.medicationId}`))

              window.dispatchEvent(
                new CustomEvent("medtrack-dose-due", {
                  detail: { dose },
                }),
              )
            }
          }, timeUntilDose)
          ;(window as any).medtrackTimeouts = (window as any).medtrackTimeouts || []
          ;(window as any).medtrackTimeouts.push(doseTimeout)
        }
      })
    }

    scheduleNotifications()
  }, [upcomingDoses, notificationsEnabled, activeNotifications])

  const requestNotificationPermission = async () => {
    if ("Notification" in window) {
      const permission = await Notification.requestPermission()
      setPermission(permission)
      setNotificationsEnabled(permission === "granted")

      if (permission === "granted") {
        new Notification("MedTrack Notifications Enabled! 🎉", {
          body: "You'll receive reminders for upcoming doses and earn points for timely logging",
          icon: "/placeholder.svg?height=64&width=64",
        })
      }
    }
  }

  const addToGoogleCalendar = (dose: any) => {
    const startTime = new Date(dose.scheduledTime)
    const endTime = new Date(startTime.getTime() + 15 * 60000)

    const event = {
      title: `💊 Take ${dose.medicationName}`,
      start: startTime.toISOString().replace(/[-:]/g, "").split(".")[0] + "Z",
      end: endTime.toISOString().replace(/[-:]/g, "").split(".")[0] + "Z",
      description: `Medication: ${dose.medicationName}\nDosage: ${dose.dosage}\n\n🏆 Log on time to earn bonus points!\n\nGenerated by MedTrack`,
    }

    const googleCalendarUrl = `https://calendar.google.com/calendar/render?action=TEMPLATE&text=${encodeURIComponent(event.title)}&dates=${event.start}/${event.end}&details=${encodeURIComponent(event.description)}`
    window.open(googleCalendarUrl, "_blank")
  }

  const urgentDoses = upcomingDoses.filter((dose) => dose.timeUntil <= 30 * 60 * 1000)
  const hasUrgentDoses = urgentDoses.length > 0

  return (
    <div className="relative">
      <Button
        variant="outline"
        size="icon"
        onClick={() => setShowNotifications(!showNotifications)}
        onMouseEnter={() => setShowPreview(true)}
        onMouseLeave={() => setShowPreview(false)}
        className={`btn-3d relative ${
          hasUrgentDoses
            ? "pulse-glow border-red-300 bg-gradient-to-r from-red-50 to-orange-50"
            : "bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200"
        }`}
      >
        {hasUrgentDoses ? (
          <BellRing
            className={`w-4 h-4 text-red-500 ${
              urgentDoses.some((dose) => dose.timeUntil <= 5 * 60 * 1000) ? "animate-bounce" : ""
            }`}
          />
        ) : (
          <Bell className="w-4 h-4 text-blue-600" />
        )}
        {upcomingDoses.length > 0 && (
          <Badge className="absolute -top-2 -right-2 h-5 w-5 p-0 text-xs gradient-primary-solid text-white border-0">
            {upcomingDoses.length}
          </Badge>
        )}
      </Button>

      {/* Left-positioned notification preview */}
      {upcomingDoses.length > 0 && (
        <div className={`notification-preview ${showPreview && !showNotifications ? "show" : ""}`}>
          <div className="flex items-center gap-2 mb-2">
            <Sparkles className="w-4 h-4 text-blue-500" />
            <span className="font-semibold text-gray-800">Next Dose</span>
          </div>
          <div className="space-y-1">
            <p className="font-medium text-gray-900">{upcomingDoses[0].medicationName}</p>
            <p className="text-gray-600 text-xs">{upcomingDoses[0].dosage}</p>
            <div className="flex items-center gap-2 text-xs text-gray-500">
              <Clock className="w-3 h-3" />
              <span>
                {new Date(upcomingDoses[0].scheduledTime).toLocaleTimeString([], {
                  hour: "2-digit",
                  minute: "2-digit",
                })}
              </span>
              <span className="text-blue-600 font-medium">
                in {Math.floor(upcomingDoses[0].timeUntil / (1000 * 60 * 60))}h{" "}
                {Math.floor((upcomingDoses[0].timeUntil % (1000 * 60 * 60)) / (1000 * 60))}m
              </span>
            </div>
          </div>
        </div>
      )}

      {showNotifications && (
        <div className="absolute right-0 top-12 w-96 z-50 slide-in-right">
          <Card className="card-3d border-0">
            <CardHeader className="pb-3 gradient-primary-solid text-white rounded-t-2xl">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <div className="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center">
                    <Bell className="w-4 h-4" />
                  </div>
                  <CardTitle className="text-lg">Smart Reminders</CardTitle>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setShowNotifications(false)}
                  className="text-white hover:bg-white/20"
                >
                  ×
                </Button>
              </div>
              <CardDescription className="text-blue-100">Intelligent medication notifications</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4 p-4">
              {/* Enhanced Notification Settings */}
              <div className="p-4 glass-effect rounded-xl border border-white/20">
                <div className="flex items-center justify-between mb-3">
                  <span className="text-sm font-medium text-gray-800">Smart Notifications</span>
                  <Badge
                    variant={notificationsEnabled ? "default" : "secondary"}
                    className={notificationsEnabled ? "gradient-success text-white border-0" : ""}
                  >
                    {notificationsEnabled ? "Active" : "Disabled"}
                  </Badge>
                </div>
                <p className="text-xs text-gray-600 mb-3">Get reminders 15 minutes before and at dose time</p>
                {!notificationsEnabled && (
                  <Button
                    size="sm"
                    onClick={requestNotificationPermission}
                    className="w-full btn-3d gradient-primary-solid text-white border-0"
                  >
                    <Settings className="w-3 h-3 mr-2" />
                    Enable Smart Reminders
                  </Button>
                )}
              </div>

              {/* Upcoming Doses with Enhanced Info */}
              {upcomingDoses.length > 0 ? (
                <div className="space-y-3">
                  <h4 className="font-medium text-sm flex items-center gap-2 text-gray-800">
                    <Clock className="w-4 h-4 text-blue-500" />
                    Upcoming Doses
                  </h4>
                  {upcomingDoses.slice(0, 5).map((dose, index) => {
                    const isUrgent = dose.timeUntil <= 30 * 60 * 1000
                    const isVeryUrgent = dose.timeUntil <= 5 * 60 * 1000
                    const hours = Math.floor(dose.timeUntil / (1000 * 60 * 60))
                    const minutes = Math.floor((dose.timeUntil % (1000 * 60 * 60)) / (1000 * 60))

                    return (
                      <div
                        key={index}
                        className={`p-4 rounded-xl border transition-all duration-300 ${
                          isVeryUrgent
                            ? "border-red-300 gradient-secondary text-white pulse-glow"
                            : isUrgent
                              ? "border-orange-200 gradient-warning"
                              : "border-gray-200 glass-effect"
                        }`}
                      >
                        <div className="flex items-start justify-between mb-3">
                          <div>
                            <p className={`font-medium text-sm ${isVeryUrgent ? "text-white" : "text-gray-900"}`}>
                              {dose.medicationName}
                            </p>
                            <p className={`text-xs ${isVeryUrgent ? "text-white/80" : "text-gray-600"}`}>
                              {dose.dosage}
                            </p>
                          </div>
                          <div className="flex flex-col items-end gap-1">
                            {isVeryUrgent && (
                              <Badge variant="destructive" className="text-xs animate-pulse bg-white text-red-600">
                                Now!
                              </Badge>
                            )}
                            {isUrgent && !isVeryUrgent && (
                              <Badge className="text-xs bg-orange-500 text-white border-0">Soon</Badge>
                            )}
                          </div>
                        </div>

                        <div
                          className={`flex items-center gap-2 text-xs mb-3 ${
                            isVeryUrgent ? "text-white/80" : "text-gray-500"
                          }`}
                        >
                          <Clock className="w-3 h-3" />
                          <span>
                            {new Date(dose.scheduledTime).toLocaleTimeString([], {
                              hour: "2-digit",
                              minute: "2-digit",
                            })}
                          </span>
                          <span>
                            ({hours > 0 ? `${hours}h ` : ""}
                            {minutes}m)
                          </span>
                        </div>

                        {/* Points incentive */}
                        <div
                          className={`flex items-center gap-1 mb-3 text-xs ${
                            isVeryUrgent ? "text-yellow-200" : "text-yellow-600"
                          }`}
                        >
                          <Star className="w-3 h-3" />
                          <span>Earn 15 points for on-time logging</span>
                        </div>

                        <div className="flex gap-2">
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => addToGoogleCalendar(dose)}
                            className={`flex-1 text-xs btn-3d ${
                              isVeryUrgent
                                ? "bg-white/20 border-white/30 text-white hover:bg-white/30"
                                : "border-blue-200 text-blue-600 hover:bg-blue-50"
                            }`}
                          >
                            <Calendar className="w-3 h-3 mr-1" />
                            Add to Calendar
                          </Button>
                        </div>
                      </div>
                    )
                  })}
                </div>
              ) : (
                <div className="text-center py-8">
                  <div className="w-16 h-16 bg-gradient-to-r from-blue-100 to-indigo-100 rounded-full flex items-center justify-center mx-auto mb-3">
                    <Bell className="w-8 h-8 text-blue-500" />
                  </div>
                  <p className="text-sm text-gray-600 font-medium">No upcoming doses</p>
                  <p className="text-xs text-gray-400">You're all caught up!</p>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  )
}
